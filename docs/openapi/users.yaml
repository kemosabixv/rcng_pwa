swagger: '2.0'
info:
  title: Users API
  description: |
    This API handles user management in the RCNG system.
    It allows creating, updating, and managing user accounts, profiles, and permissions.
  version: 1.0.0
  contact:
    name: RCNG Support
    email: support@rcng.example.com
  license:
    name: Proprietary
    url: https://rcng.example.com/license

host: api.rcng.example.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
produces:
  - application/json

definitions:
  User:
    type: object
    required:
      - name
      - email
      - username
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        example: 1
      name:
        type: string
        maxLength: 255
        example: "John Doe"
      email:
        type: string
        format: email
        maxLength: 255
        example: "john.doe@example.com"
      username:
        type: string
        maxLength: 50
        example: "johndoe"
      phone:
        type: string
        maxLength: 20
        example: "+254700123456"
      gender:
        type: string
        enum: [male, female, other, prefer_not_to_say]
        example: "male"
      date_of_birth:
        type: string
        format: date
        example: "1985-05-15"
      bio:
        type: string
        example: "Rotary Club member since 2015"
      address:
        type: string
        example: "123 Main St, Nairobi"
      city:
        type: string
        example: "Nairobi"
      state:
        type: string
        example: "Nairobi County"
      country:
        type: string
        example: "Kenya"
      postal_code:
        type: string
        example: "00100"
      avatar_url:
        type: string
        format: uri
        example: "https://api.rcng.example.com/storage/avatars/1.jpg"
      email_verified_at:
        type: string
        format: date-time
        nullable: true
        example: "2023-01-10T12:00:00Z"
      last_login_at:
        type: string
        format: date-time
        nullable: true
        example: "2023-02-20T14:30:00Z"
      last_login_ip:
        type: string
        example: "192.168.1.1"
      status:
        type: string
        enum: [active, inactive, suspended, pending_verification]
        default: "active"
        example: "active"
      two_factor_enabled:
        type: boolean
        default: false
        example: true
      created_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-01-01T10:00:00Z"
      updated_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-02-15T11:30:00Z"
      roles:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            name:
              type: string
              example: "member"
            display_name:
              type: string
              example: "Club Member"
            description:
              type: string
              example: "Regular club member with basic access"
      permissions:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            name:
              type: string
              example: "create-users"
            display_name:
              type: string
              example: "Create Users"
            description:
              type: string
              example: "Can create new users"

  UserCreate:
    type: object
    required:
      - name
      - email
      - username
      - password
      - password_confirmation
    properties:
      name:
        type: string
        maxLength: 255
        example: "John Doe"
      email:
        type: string
        format: email
        maxLength: 255
        example: "john.doe@example.com"
      username:
        type: string
        maxLength: 50
        example: "johndoe"
      password:
        type: string
        minLength: 8
        example: "secret123"
      password_confirmation:
        type: string
        example: "secret123"
      phone:
        type: string
        maxLength: 20
        example: "+254700123456"
      gender:
        type: string
        enum: [male, female, other, prefer_not_to_say]
        example: "male"
      date_of_birth:
        type: string
        format: date
        example: "1985-05-15"
      bio:
        type: string
        example: "Rotary Club member since 2015"
      address:
        type: string
        example: "123 Main St, Nairobi"
      city:
        type: string
        example: "Nairobi"
      state:
        type: string
        example: "Nairobi County"
      country:
        type: string
        example: "Kenya"
      postal_code:
        type: string
        example: "00100"
      status:
        type: string
        enum: [active, inactive, suspended, pending_verification]
        default: "active"
        example: "active"
      role_ids:
        type: array
        items:
          type: integer
          format: int64
        example: [2, 3]

  UserUpdate:
    type: object
    properties:
      name:
        type: string
        maxLength: 255
        example: "John Doe Jr."
      email:
        type: string
        format: email
        maxLength: 255
        example: "john.doe.jr@example.com"
      username:
        type: string
        maxLength: 50
        example: "johndoejr"
      current_password:
        type: string
        description: Required when changing password
        example: "oldpassword123"
      password:
        type: string
        minLength: 8
        description: New password (requires current_password)
        example: "newpassword123"
      password_confirmation:
        type: string
        description: New password confirmation (required with password)
        example: "newpassword123"
      phone:
        type: string
        maxLength: 20
        example: "+254700123456"
      gender:
        type: string
        enum: [male, female, other, prefer_not_to_say]
        example: "male"
      date_of_birth:
        type: string
        format: date
        example: "1985-05-15"
      bio:
        type: string
        example: "Updated bio information"
      address:
        type: string
        example: "456 New Street, Nairobi"
      city:
        type: string
        example: "Nairobi"
      state:
        type: string
        example: "Nairobi County"
      country:
        type: string
        example: "Kenya"
      postal_code:
        type: string
        example: "00100"
      status:
        type: string
        enum: [active, inactive, suspended, pending_verification]
        example: "active"
      role_ids:
        type: array
        items:
          type: integer
          format: int64
        example: [2, 3]

  Role:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        example: 1
      name:
        type: string
        example: "admin"
      display_name:
        type: string
        example: "Administrator"
      description:
        type: string
        example: "System administrator with full access"
      created_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-01-01T10:00:00Z"
      updated_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-01-01T10:00:00Z"

  Permission:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        example: 1
      name:
        type: string
        example: "create-users"
      display_name:
        type: string
        example: "Create Users"
      description:
        type: string
        example: "Can create new users"
      created_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-01-01T10:00:00Z"
      updated_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-01-01T10:00:00Z"

  UserActivity:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        example: 1
      user_id:
        type: integer
        format: int64
        example: 1
      type:
        type: string
        example: "login"
      description:
        type: string
        example: "User logged in"
      ip_address:
        type: string
        example: "192.168.1.1"
      user_agent:
        type: string
        example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
      created_at:
        type: string
        format: date-time
        readOnly: true
        example: "2023-02-20T14:30:00Z"
      user:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          name:
            type: string
            example: "John Doe"
          email:
            type: string
            example: "john@example.com"

  UserStats:
    type: object
    properties:
      total_users:
        type: integer
        example: 150
      active_users:
        type: integer
        example: 120
      new_users_this_month:
        type: integer
        example: 15
      users_by_status:
        type: array
        items:
          type: object
          properties:
            status:
              type: string
              example: "active"
            count:
              type: integer
              example: 120
      users_by_role:
        type: array
        items:
          type: object
          properties:
            role_id:
              type: integer
              format: int64
              example: 2
            role_name:
              type: string
              example: "member"
            count:
              type: integer
              example: 100
      recent_activities:
        type: array
        items:
          $ref: '#/definitions/UserActivity'

  ErrorResponse:
    type: object
    properties:
      success:
        type: boolean
        default: false
      message:
        type: string
        example: "Error message describing the issue"
      errors:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        example:
          email: ["The email has already been taken."]

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: Use format 'Bearer {token}'

paths:
  /users:
    get:
      tags:
        - Users
      summary: List all users
      description: Returns a paginated list of users with optional filtering
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - $ref: '#/parameters/sort'
        - $ref: '#/parameters/order'
        - name: status
          in: query
          description: Filter by status
          type: string
          enum: [active, inactive, suspended, pending_verification]
        - name: role
          in: query
          description: Filter by role name
          type: string
        - name: search
          in: query
          description: Search in name, email, or username
          type: string
      responses:
        '200':
          description: A paginated list of users
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
              meta:
                $ref: '#/definitions/PaginationMeta'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [view-users, admin]

    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user account with the provided details
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '201':
          description: User created successfully
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [create-users, admin]

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the authenticated user's profile information
      responses:
        '200':
          description: Current user profile
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/Unauthorized'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: []

    put:
      tags:
        - Users
      summary: Update current user profile
      description: Updates the authenticated user's profile information
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: []

    patch:
      tags:
        - Users
      summary: Partially update current user profile
      description: Partially updates the authenticated user's profile information
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: []

  /users/me/avatar:
    post:
      tags:
        - Users
      summary: Upload profile avatar
      description: Uploads a new profile avatar for the authenticated user
      consumes:
        - multipart/form-data
      parameters:
        - name: avatar
          in: formData
          description: The image file to upload (max 5MB)
          required: true
          type: file
      responses:
        '200':
          description: Avatar uploaded successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '413':
          description: File too large (max 5MB)
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: []

    delete:
      tags:
        - Users
      summary: Remove profile avatar
      description: Removes the authenticated user's profile avatar
      responses:
        '200':
          description: Avatar removed successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Avatar removed successfully"
        '401':
          $ref: '#/responses/Unauthorized'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: []

  /users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: integer
        format: int64

    get:
      tags:
        - Users
      summary: Get a specific user
      description: Returns the details of a specific user
      responses:
        '200':
          description: User details
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [view-users, admin]

    put:
      tags:
        - Users
      summary: Update a user
      description: Updates an existing user's information
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [edit-users, admin]

    patch:
      tags:
        - Users
      summary: Partially update a user
      description: Partially updates an existing user's information
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          schema:
            $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [edit-users, admin]

    delete:
      tags:
        - Users
      summary: Delete a user
      description: Soft deletes a user account
      responses:
        '200':
          description: User deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "User deleted successfully"
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [delete-users, admin]

  /users/{id}/avatar:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: integer
        format: int64

    post:
      tags:
        - Users
      summary: Upload user avatar
      description: Uploads a new avatar for a specific user
      consumes:
        - multipart/form-data
      parameters:
        - name: avatar
          in: formData
          description: The image file to upload (max 5MB)
          required: true
          type: file
      responses:
        '200':
          description: Avatar uploaded successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/User'
        '400':
          $ref: '#/responses/BadRequest'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '413':
          description: File too large (max 5MB)
        '422':
          $ref: '#/responses/ValidationError'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [edit-users, admin]

    delete:
      tags:
        - Users
      summary: Remove user avatar
      description: Removes a user's profile avatar
      responses:
        '200':
          description: Avatar removed successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Avatar removed successfully"
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [edit-users, admin]

  /users/{id}/activities:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: integer
        format: int64

    get:
      tags:
        - Users
      summary: Get user activities
      description: Returns a paginated list of activities for a specific user
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: type
          in: query
          description: Filter by activity type
          type: string
        - name: start_date
          in: query
          description: Filter activities after this date (YYYY-MM-DD)
          type: string
          format: date
        - name: end_date
          in: query
          description: Filter activities before this date (YYYY-MM-DD)
          type: string
          format: date
      responses:
        '200':
          description: List of user activities
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/UserActivity'
              meta:
                $ref: '#/definitions/PaginationMeta'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [view-users, admin]

  /users/stats:
    get:
      tags:
        - Users
      summary: Get user statistics
      description: Returns statistics about users and their activities
      responses:
        '200':
          description: User statistics
          schema:
            $ref: '#/definitions/UserStats'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [view-users, admin]

  /users/roles:
    get:
      tags:
        - Roles & Permissions
      summary: List all roles
      description: Returns a list of all available roles
      responses:
        '200':
          description: List of roles
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [view-roles, admin]

  /users/permissions:
    get:
      tags:
        - Roles & Permissions
      summary: List all permissions
      description: Returns a list of all available permissions
      responses:
        '200':
          description: List of permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        '401':
          $ref: '#/responses/Unauthorized'
        '403':
          $ref: '#/responses/Forbidden'
        '500':
          $ref: '#/responses/ServerError'
      security:
        - Bearer: [view-permissions, admin]

parameters:
  page:
    name: page
    in: query
    description: Page number
    type: integer
    default: 1
    minimum: 1
  perPage:
    name: per_page
    in: query
    description: Number of items per page
    type: integer
    default: 15
    maximum: 100
  sort:
    name: sort
    in: query
    description: Field to sort by
    type: string
    default: created_at
  order:
    name: order
    in: query
    description: Sort order (asc or desc)
    type: string
    enum: [asc, desc]
    default: desc

responses:
  BadRequest:
    description: Bad request
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        success: false
        message: "Invalid input data"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        message: "Unauthenticated."
  Forbidden:
    description: Forbidden
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        success: false
        message: "You do not have permission to perform this action."
  NotFound:
    description: Resource not found
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        success: false
        message: "User not found"
  ValidationError:
    description: Validation error
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        success: false
        message: "The given data was invalid."
        errors:
          email: ["The email has already been taken."]
  ServerError:
    description: Server error
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/json:
        success: false
        message: "Server Error"

definitions:
  PaginationMeta:
    type: object
    properties:
      current_page:
        type: integer
        example: 1
      from:
        type: integer
        example: 1
      last_page:
        type: integer
        example: 1
      per_page:
        type: integer
        example: 15
      to:
        type: integer
        example: 10
      total:
        type: integer
        example: 10
